#!/usr/bin/env bash

# Decodes a JWT into readable claims
# Usage:
# jwt_decode "header.payload.signature"
function jwt_decode() {
    echo "$1" | jwt decode -
}

# Lint Go code
# Usage:
# `go_lint`
# `go_lint ./...`
# `go_lint dir1 dir2/... dir3/file1.go`
# `go_lint --new-from-rev=HEAD~1 ./...`
# `go_lint --new-from-rev=e5925f4 path/to/package`
function go_lint() {
    golangci-lint run --config ~/.golangci.yml "$@" --skip-dirs=proto-vendor
}

# Serve godoc from localhost:6060
function go_doc() {
    godoc -http=:6060
}

# Run go tests and generate HTML coverage report
# Usage:
# `go_test_cover <package>`
# `go_test_cover ./...`
function go_test_cover() {
    go test "$1" -coverprofile=coverage.out
    go tool cover -html=coverage.out
}

# Generate and open a dependency graph for Go modules
function go_mod_graph() {
    go mod graph | modgraphviz | dot -Tpng -o graph.png && open graph.png
}

# Git compare two branches
# Usage:
# `git_compare` -> local branch with master
# `git_compare <branch>` -> <branch> with master
# `git_compare <branch_1>...<branch_2>`
# `git_compare <tag_1>...<tag_2>`
function git_compare() {
    hub compare "$@"
}

# Get an access token from an HCP service principal
# Usage:
# `hcp_access_token <client_id> <client_secret>`
function hcp_access_token() {
  curl --silent --request POST --header "Content-Type: application/json" \
  --data '{
    "audience": "https://api.hashicorp.cloud",
    "grant_type": "client_credentials",
    "client_id": "'"$1"'",
    "client_secret": "'"$2"'"
  }' \
      https://auth.hashicorp.com/oauth/token | jq '.access_token' --raw-output
}

# Starts Vault server using the passed config
# Usage:
# vs config-file.hcl
function vs() {
    vault server -config="$1" >/tmp/vault.log 2>&1 &
}

# Starts a Vault server in dev mode with in-memory storage and a plugin directory
function vsd() {
    vault server -log-level=trace -dev -dev-root-token-id="root" -dev-plugin-dir="${PLUGIN_DIR}"
}

# Start Vault servers listening on different addresses
function vsd1() {
    VAULT_DEV_LISTEN_ADDRESS="127.0.0.1:8200" vault server -log-level=trace -dev -dev-root-token-id="root"
}
function vsd2() {
    VAULT_DEV_LISTEN_ADDRESS="127.0.0.2:8200" vault server -log-level=trace -dev -dev-root-token-id="root"
}
function vsd3() {
    VAULT_DEV_LISTEN_ADDRESS="127.0.0.3:8200" vault server -log-level=trace -dev -dev-root-token-id="root"
}

# Starts a Vault server in with a Consul storage backend
function vsc() {
    vault server -config="$HOME"/Workspace/hashicorp/environments/vault/server/standalone/config-consul.hcl > /tmp/vault.log 2>&1 &
}

# Copies the passed plugin binary to my development plugin directory
# Usage
# copy_plugin ./bin/vault-plugin-auth-jwt
function copy_plugin() {
    cp "$1" "${PLUGIN_DIR}"
}

# Loads the passed Vault plugin
# Usage:
# register_plugin <plugin_type> <plugin_command> <plugin_name>
# register_plugin secret vault-plugin-secrets-keymgmt vault-plugin-secrets-keymgmt-ext
# register_plugin auth vault-plugin-auth-jwt vault-plugin-auth-jwt-ext
# register_plugin database vault-plugin-database-snowflake vault-plugin-database-snowflake-ext
function register_plugin() {      
    PLUGIN_TYPE="$1"
    PLUGIN_CMD="$2"
    PLUGIN_NAME="$3"
    PLUGIN_BINARY="${PLUGIN_DIR}/${PLUGIN_CMD}"
    SHA256=$(shasum -a 256 "${PLUGIN_BINARY}" | cut -f 1 -d ' ')
    vault plugin register \
        -sha256="${SHA256}" \
        -command="${PLUGIN_CMD}" \
        "${PLUGIN_TYPE}" \
        "${PLUGIN_NAME}"
}

# Starts a Consul server in dev mode
function csd() {
    consul agent -dev >/tmp/consul.log 2>&1 &
}

# Starts a Waypoint server
function wsd() {
    waypoint server run -accept-tos >/tmp/waypoint.log 2>&1 &
}

# Starts a Boundary server in dev mode
function bsd() {
    boundary dev
}

# Tunnel Vault API/UI over SSH
# Usage:
# vault_tun <username>@<remote-address>
function vault_tun() {
    # ssh -N -L <local-port>:<remote-address>:<remote-port> <username>@<remote-address>
    ssh -N -L 8200:127.0.0.1:8200 "$@"
}

# Vault cluster helper functions
function v1() {
    VAULT_ADDR=http://127.0.0.1:8200 vault "$@"
}
function v2() {
    VAULT_ADDR=http://127.0.0.2:8200 vault "$@"
}
function v3() {
    VAULT_ADDR=http://127.0.0.3:8200 vault "$@"
}
function v4() {
    VAULT_ADDR=http://127.0.0.4:8200 vault "$@"
}
function v5() {
    VAULT_ADDR=http://127.0.0.5:8200 vault "$@"
}
function v6() {
    VAULT_ADDR=http://127.0.0.6:8200 vault "$@"
}

# Vault curl shorthand
function vc() {
    curl --header "X-Vault-Token: $(cat ~/.vault-token)" --header "X-Vault-Namespace: $VAULT_NAMESPACE" "$@" | jq
}

# Writes a super permissive Vault 'admin' policy
function vp() {
    vault policy write admin - <<EOF
    path "*" {
        capabilities = ["create", "read", "update", "delete", "list", "sudo"]
    }
EOF
}

# vault_stack_dump dumps goroutine stacks for Vault with the given pid.
# The goroutine stacks will be in the Vault logs.
# Usage:
# vault_stack_dump <vault_pid>
function vault_stack_dump() {
    kill -SIGUSR2 "$1"
}

# vault_audit tails the audit logs for auditing setup by vsd
function vault_audit() {
    vault audit enable file file_path="${VAULT_AUDIT_FILE}"
    tail -f "${VAULT_AUDIT_FILE}" | jq
}

# Initializes, unseals, and logs into Vault with the root token.
# This is used for development purposes.
function init_unseal() {
    INIT_RESPONSE=$(vault operator init -format=json -key-shares 1 -key-threshold 1)
    UNSEAL_KEY=$(echo "$INIT_RESPONSE" | jq -r '.unseal_keys_b64[0]')
    ROOT_TOKEN=$(echo "$INIT_RESPONSE" | jq -r '.root_token')
    vault operator unseal "${UNSEAL_KEY}"
    vault login "${ROOT_TOKEN}"
    echo ""
    echo "-----------"
    echo "Unseal key: $UNSEAL_KEY"
    echo "Root token: $ROOT_TOKEN"
    echo "-----------"
}

# Show all q.Q logs from Go
function qq() {
    clear

    logpath="$TMPDIR/q"
    if [[ -z "$TMPDIR" ]]; then
        logpath="/tmp/q"
    fi

    if [[ ! -f "$logpath" ]]; then
        echo 'Q LOG' >"$logpath"
    fi

    less "$logpath"
}

# Tail q.Q logs from Go
function tailqq() {
    clear

    logpath="$TMPDIR/q"
    if [[ -z "$TMPDIR" ]]; then
        logpath="/tmp/q"
    fi

    if [[ ! -f "$logpath" ]]; then
        echo 'Q LOG' >"$logpath"
    fi

    tail -100f -- "$logpath"
}

# Remove and tail q.Q logs from Go
function rmqq() {
    logpath="$TMPDIR/q"
    if [[ -z "$TMPDIR" ]]; then
        logpath="/tmp/q"
    fi
    if [[ -f "$logpath" ]]; then
        rm "$logpath"
    fi
    qq
}

# Base64 decode the passing string
function base64_decode() {
    echo "$@" | base64 --decode
}

# Base64 encode the passed string
function base64_encode() {
    echo "$@" | base64
}

# Clean docker resources including:
#  - all stopped containers
#  - all networks not used by at least one container
#  - all dangling images
#  - all dangling build cache
function docker_clean() {
    docker system prune --all --volumes
}

# Kill all docker containers
function docker_killall() {
    docker rm -f "$(docker ps -a -q)"
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_"
}

# Copy current directory to clipboard on macOS
function pwdcp() {
    pwd | pbcopy
}

# Minify JSON using jq
function json_minify() {
    jq -c . <"$@"
}

# Escape JSON using jq
function json_escape() {
    json_minify "$@" | jq -R
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null >/dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* ./*
    fi
}

# Usage
# url_encode <string>
function url_encode() {
    old_lc_collate=$LC_COLLATE
    LC_COLLATE=C

    local length="${#1}"
    for (( i = 0; i < length; i++ )); do
        local c="${1:$i:1}"
        case $c in
            [a-zA-Z0-9.~_-]) printf '%s' "$c" ;;
            *) printf '%%%02X' "'$c" ;;
        esac
    done

    LC_COLLATE=$old_lc_collate
}

# Usage
# url_decode <string>
function url_decode() {
    local url_encoded="${1//+/ }"
    printf '%b' "${url_encoded//%/\\x}"
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c <"$1")
    local gzipsize=$(gzip -c "$1" | wc -c)
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Run `dig` and display the most useful info
function digg() {
    dig +nocmd "$1" any +multiline +noall +answer
}

# Generate an RSA public/private keypair PEMs
function gen_rsa_pem() {
    openssl genrsa -out private-key.pem 2048
    openssl rsa -in private-key.pem -pubout -out public-key.pem
}

# Inspect X.509 certificate contents
function x509_contents() {
    openssl x509 -in "$@" -text -noout
}

# Get PEM-encoded public key from X.509 certificate
function x509_pubkey() {
    openssl x509 -in "$@" -noout -pubkey
}

# Inspect certificate signing request (CSR)
function x509_csr() {
    openssl req -text -noout -verify -in "$@"
}

function x509_ca_verify() {
    openssl verify -CAfile "$1" "$2"
}

# Show all the names (CNs and SANs) listed in the SSL certificate for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified."
        return 1
    fi

    local domain="${1}"
    echo "Testing ${domain}â€¦"
    echo "" # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
        openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

    if [[ "${tmp}" == *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" |
            openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version")
        echo "Common Name:"
        echo "" # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
        echo "" # newline
        echo "Subject Alternative Name(s):"
        echo "" # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
            sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
        return 0
    else
        echo "ERROR: Certificate not found."
        return 1
    fi
}

# Runs proselint against all files in the current directory
function prose_lint() {
    proselint "$(find . -type f)"
}
